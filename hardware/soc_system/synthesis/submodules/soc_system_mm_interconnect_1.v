// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire [11:0]  hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0]  hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire         hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire         hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0]  hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [127:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [15:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire         hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire         hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire         hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0]  hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]   hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire         hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire         hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0]  hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0]  hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire         hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire         hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0]  hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [127:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]   hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire         hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire         hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire         hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire         hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire         hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0]  hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]   hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire         hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire         hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire         hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0]  hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]   hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire         hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire         hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire         hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire         hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0]  hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0]  hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]   hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire         hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire         hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire         hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire         pll_0_outclk0_clk,                                                //                                              pll_0_outclk0.clk
		input  wire         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         onchip_memory2_0_reset1_reset_bridge_in_reset_reset,              //              onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		input  wire         sysid_reset_reset_bridge_in_reset_reset,                          //                          sysid_reset_reset_bridge_in_reset.reset
		output wire [12:0]  onchip_memory2_0_s1_address,                                      //                                        onchip_memory2_0_s1.address
		output wire         onchip_memory2_0_s1_write,                                        //                                                           .write
		input  wire [63:0]  onchip_memory2_0_s1_readdata,                                     //                                                           .readdata
		output wire [63:0]  onchip_memory2_0_s1_writedata,                                    //                                                           .writedata
		output wire [7:0]   onchip_memory2_0_s1_byteenable,                                   //                                                           .byteenable
		output wire         onchip_memory2_0_s1_chipselect,                                   //                                                           .chipselect
		output wire         onchip_memory2_0_s1_clken,                                        //                                                           .clken
		output wire [0:0]   sysid_control_slave_address,                                      //                                        sysid_control_slave.address
		input  wire [31:0]  sysid_control_slave_readdata                                      //                                                           .readdata
	);

	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [124:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          rsp_mux_002_src_ready;                                                              // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [124:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          rsp_mux_003_src_ready;                                                              // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> rsp_mux_003:src_ready
	wire    [3:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                              // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                           // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                           // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [29:0] sysid_control_slave_agent_m0_address;                                               // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                            // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                  // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                         // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                  // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                             // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                 // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                            // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                          // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [125:0] sysid_control_slave_agent_rf_source_data;                                           // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                          // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                  // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                    // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                       // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [125:0] sysid_control_slave_agent_rsp_fifo_out_data;                                        // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                       // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                               // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                 // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                     // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                      // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                     // sysid_control_slave_agent_rdata_fifo:in_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire   [63:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [29:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [7:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [63:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [3:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [161:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [161:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                          // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [232:0] hps_0_h2f_axi_master_agent_write_cp_data;                                           // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                          // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                  // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                    // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                           // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [232:0] hps_0_h2f_axi_master_agent_read_cp_data;                                            // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                           // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                   // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                     // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                       // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_002:sink_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                        // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_002:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                       // router_002:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                               // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                 // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [124:0] router_002_src_data;                                                                // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                               // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                             // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                        // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_003:sink_valid
	wire  [124:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                         // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_003:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                        // router_003:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                  // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [124:0] router_003_src_data;                                                                // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                               // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                             // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                 // sysid_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [124:0] sysid_control_slave_agent_rp_data;                                                  // sysid_control_slave_agent:rp_data -> router_004:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                 // router_004:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                         // sysid_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                           // sysid_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux:sink_valid
	wire  [124:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_005:sink_valid
	wire  [160:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_005:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_005:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [160:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [232:0] router_src_data;                                                                    // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                   // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                                 // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [232:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                       // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                                      // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                                    // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                              // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [232:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                  // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                                      // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [232:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                       // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                                      // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                                    // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                              // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [232:0] router_001_src_data;                                                                // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                               // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                             // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [232:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                       // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                                      // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                                    // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                              // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [232:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                              // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                                      // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [232:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                       // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                                      // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                                    // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                              // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> sysid_control_slave_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> sysid_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                  // sysid_control_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> sysid_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> sysid_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> sysid_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                                    // sysid_control_slave_burst_adapter:source0_valid -> sysid_control_slave_agent:cp_valid
	wire  [124:0] sysid_control_slave_burst_adapter_source0_data;                                     // sysid_control_slave_burst_adapter:source0_data -> sysid_control_slave_agent:cp_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                                    // sysid_control_slave_agent:cp_ready -> sysid_control_slave_burst_adapter:source0_ready
	wire    [3:0] sysid_control_slave_burst_adapter_source0_channel;                                  // sysid_control_slave_burst_adapter:source0_channel -> sysid_control_slave_agent:cp_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                            // sysid_control_slave_burst_adapter:source0_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                              // sysid_control_slave_burst_adapter:source0_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [160:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                              // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                    // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [160:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                     // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                    // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [3:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                                  // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                            // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                              // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [124:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                           // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [124:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire    [3:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src2_valid;                                                               // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [124:0] rsp_demux_src2_data;                                                                // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                               // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [3:0] rsp_demux_src2_channel;                                                             // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                       // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                         // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                               // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [124:0] rsp_demux_src3_data;                                                                // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                               // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire    [3:0] rsp_demux_src3_channel;                                                             // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                       // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                         // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:in_valid
	wire  [232:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                               // hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [124:0] hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_data;          // hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_ready;         // cmd_mux:sink0_ready -> hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:out_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [232:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                               // hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;         // hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [160:0] hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;          // hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;         // cmd_mux_001:sink0_ready -> hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;       // hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket; // hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:in_valid
	wire  [232:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                           // hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [124:0] hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_data;          // hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_ready;         // cmd_mux:sink1_ready -> hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:out_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [232:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                           // hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;         // hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [160:0] hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;          // hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;         // cmd_mux_001:sink1_ready -> hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;       // hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket; // hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [124:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                               // sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;         // sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [232:0] sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;          // sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;         // rsp_mux:sink0_ready -> sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [3:0] sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;       // sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket; // sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;   // sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [124:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                               // sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;         // sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [232:0] sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;          // sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;         // rsp_mux_001:sink0_ready -> sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [3:0] sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;       // sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket; // sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;   // sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [160:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                           // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;         // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire  [232:0] onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;          // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;         // rsp_mux:sink1_ready -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [3:0] onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;       // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket; // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;   // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [160:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                           // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;         // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [232:0] onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;          // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;         // rsp_mux_001:sink1_ready -> onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [3:0] onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;       // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket; // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;   // onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                                     // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                                     // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                                     // sysid_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                                      // sysid_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter:in_0_ready -> sysid_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                                     // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                                      // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_001:in_0_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (pll_0_outclk0_clk),                          //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (pll_0_outclk0_clk),                                   //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                           //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                        //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                       //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                      //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                           //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (205),
		.PKT_CACHE_H               (227),
		.PKT_CACHE_L               (224),
		.PKT_ADDR_SIDEBAND_H       (203),
		.PKT_ADDR_SIDEBAND_L       (203),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (207),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (208),
		.PKT_THREAD_ID_H           (220),
		.PKT_THREAD_ID_L           (209),
		.PKT_QOS_L                 (206),
		.PKT_QOS_H                 (206),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_DATA_SIDEBAND_H       (204),
		.PKT_DATA_SIDEBAND_L       (204),
		.ST_DATA_W                 (233),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (pll_0_outclk0_clk),                                                 //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (97),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_QOS_L                 (98),
		.PKT_QOS_H                 (98),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.ID                        (1)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (pll_0_outclk0_clk),                                                 //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (rsp_mux_002_src_valid),                                             //         write_rp.valid
		.write_rp_data          (rsp_mux_002_src_data),                                              //                 .data
		.write_rp_channel       (rsp_mux_002_src_channel),                                           //                 .channel
		.write_rp_startofpacket (rsp_mux_002_src_startofpacket),                                     //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_002_src_endofpacket),                                       //                 .endofpacket
		.write_rp_ready         (rsp_mux_002_src_ready),                                             //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (rsp_mux_003_src_valid),                                             //          read_rp.valid
		.read_rp_data           (rsp_mux_003_src_data),                                              //                 .data
		.read_rp_channel        (rsp_mux_003_src_channel),                                           //                 .channel
		.read_rp_startofpacket  (rsp_mux_003_src_startofpacket),                                     //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_003_src_endofpacket),                                       //                 .endofpacket
		.read_rp_ready          (rsp_mux_003_src_ready),                                             //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                       //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                    //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (160),
		.PKT_ORI_BURST_SIZE_L      (158),
		.PKT_RESPONSE_STATUS_H     (157),
		.PKT_RESPONSE_STATUS_L     (156),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_LOCK            (106),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (151),
		.PKT_PROTECTION_L          (149),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (117),
		.PKT_BYTE_CNT_H            (116),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (135),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (136),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (161),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (162),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                    //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //       src.ready
		.src_valid          (router_003_src_valid),                                             //          .valid
		.src_data           (router_003_src_data),                                              //          .data
		.src_channel        (router_003_src_channel),                                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_004_src_ready),                       //       src.ready
		.src_valid          (router_004_src_valid),                       //          .valid
		.src_data           (router_004_src_data),                        //          .data
		.src_channel        (router_004_src_channel),                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (208),
		.PKT_SRC_ID_H              (207),
		.PKT_SRC_ID_L              (207),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (233),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (208),
		.PKT_SRC_ID_H              (207),
		.PKT_SRC_ID_L              (207),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (233),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                       //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (133),
		.PKT_BYTE_CNT_H            (116),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (117),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (161),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (111),
		.OUT_BURSTWRAP_H           (125),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                   //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (pll_0_outclk0_clk),                                                //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                        //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (pll_0_outclk0_clk),                                                //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                             //      sink.ready
		.sink_channel       (router_002_src_channel),                                           //          .channel
		.sink_data          (router_002_src_data),                                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_002 cmd_demux_003 (
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                             //      sink.ready
		.sink_channel       (router_003_src_channel),                                           //          .channel
		.sink_data          (router_003_src_data),                                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                           //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                           //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                                         //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                            //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                                     //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                                           //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                                           //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                                         //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                                            //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                                   //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                                                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                              //          .valid
		.src_data            (cmd_mux_001_src_data),                                                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                       //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                    //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                    //          .valid
		.src3_data          (rsp_demux_src3_data),                     //          .data
		.src3_channel       (rsp_demux_src3_channel),                  //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                  //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                  //          .valid
		.src_data            (rsp_mux_src_data),                                                                   //          .data
		.src_channel         (rsp_mux_src_channel),                                                                //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                              //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                              //          .valid
		.src_data            (rsp_mux_001_src_data),                                                               //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                            //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready         (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (pll_0_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                            //          .valid
		.src_data            (rsp_mux_002_src_data),                                             //          .data
		.src_channel         (rsp_mux_002_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src2_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_002 rsp_mux_003 (
		.clk                 (pll_0_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                            //          .valid
		.src_data            (rsp_mux_003_src_data),                                             //          .data
		.src_channel         (rsp_mux_003_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src3_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                               //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                             //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                         //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                               //          .ready
		.in_data              (cmd_demux_src0_data),                                                                //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_sysid_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (116),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (157),
		.OUT_PKT_RESPONSE_STATUS_L     (156),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (158),
		.OUT_PKT_ORI_BURST_SIZE_H      (160),
		.OUT_ST_DATA_W                 (161),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                               //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                             //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                                         //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                               //          .ready
		.in_data              (cmd_demux_src1_data),                                                                //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                           //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                            //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_sysid_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (116),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (157),
		.OUT_PKT_RESPONSE_STATUS_L     (156),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (158),
		.OUT_PKT_ORI_BURST_SIZE_H      (160),
		.OUT_ST_DATA_W                 (161),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                           //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                            //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                               //          .ready
		.in_data              (rsp_demux_src0_data),                                                                //          .data
		.out_endofpacket      (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_control_slave_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (sysid_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                               //          .ready
		.in_data              (rsp_demux_src1_data),                                                                //          .data
		.out_endofpacket      (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_control_slave_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (116),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (117),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (157),
		.IN_PKT_RESPONSE_STATUS_L      (156),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (158),
		.IN_PKT_ORI_BURST_SIZE_H       (160),
		.IN_ST_DATA_W                  (161),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                           //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                         //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                           //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                            //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (116),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (117),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (157),
		.IN_PKT_RESPONSE_STATUS_L      (156),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (158),
		.IN_PKT_ORI_BURST_SIZE_H       (160),
		.IN_ST_DATA_W                  (161),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                           //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                         //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                                     //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                           //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                            //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                   //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

endmodule
